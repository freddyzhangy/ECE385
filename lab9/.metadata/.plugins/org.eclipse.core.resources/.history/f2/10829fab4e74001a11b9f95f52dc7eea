/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000040;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}

// Helper Functions

unsigned char SubBytes(unsigned char input)

{
	return aes_sbox[input];
}



void RotWord(unsigned char * word)

{

	unsigned char temp = word[0];

	word[0] = word[1];
	word[1] = word[2];
	word[2] = word[3];
	word[3] = temp;

}

void keyExpansion(unsigned char * key, unsigned char * key_schedule)
{

		unsigned char temp;
		int i = 0, j = 0;

//		while(i < Nk) where Nk = 16
		while(i < 16)
		{
			key_schedule[i] = (unsigned char [4]){key[4*i], key[4*i + 1], key[4*i + 2], key[4*i + 3]};
			i += 1;
		}

//		i = Nk = 16
		i = 16;

//		while (i < Nb * (Nr + 1)) where Nb * (Nr + 1) = 176
		while(i < 176){

			temp = key_schedule[i - 1];

			if(i % 16 == 0)
				temp = SubBytes(RotWord(temp)) ^ Rcon[i/16];

			key_schedule[i] = key_schedule[i - 16] ^ temp;
			i += 1;
		}
}

void AddRoundKey(unsigned char *message, unsigned char *key, int ct)
{

	int i = 0;

	for (i = 0; i < 16; i++)
		message[i] ^= key[ct*16 + i];

}

void ShiftRows(unsigned char * message)
{

	unsigned char temp;
	int i = 0;

	for (i = 0; i < 4; i++)
	{
		switch(i){

			case 0:break;

			case 1: temp = message[i * 4];
					message[i * 4] = message[(i * 4) + 1];
					message[(i * 4) + 1] = message[(i * 4) + 2];
					message[(i * 4) + 2] = message[(i * 4) + 3];
					message[(i * 4) + 3] = temp;
					break;

			case 2: temp = message[i * 4];
					message[i *4] = message[(i * 4) + 2];
					message[(i * 4) + 2] = temp;
					temp = message[(i * 4) + 1];
					message[(i * 4) + 1] = message[(i * 4) + 3];
					message[(i * 4) + 3] = temp;
					break;

			case 3: temp = message[i * 4];
					message[i * 4] = message[(i * 4) + 3];
					message[(i * 4) + 3] = message[(i * 4) + 2];
					message[(i * 4) + 2] = message[(i * 4) + 1];
					message[(i * 4) + 1] = temp;
					break;

			default:continue;
		}
	}
}

void MixColumns(unsigned char * message)
{

	unsigned char temp[16];
	int i = 0;

	for (i = 0; i < 16; i++)
		temp = message[i];

	i = 0;

	for (i = 0; i < 16; i++)
	{

		switch(i%4){

			case 0:	message[i] = gf_mul[temp[i]][0] ^ gf_mul[temp[i + 1]][1] ^ temp[i + 2] ^ temp[i + 3];
					break;
			case 1: message[i] = temp[i - 1] ^ gf_mul[temp[i]][0] ^ gf_mul[temp[i + 1]][1] ^ temp[i + 2];
					break;
			case 2: message[i] = temp[i - 2] ^ temp[i - 1] ^ gf_mul[temp[i]][0] ^ gf_mul[temp[i + 1]][1];
					break;
			case 3: message[i] = gf_mul[temp[i - 3]][1] ^ temp[i - 2] ^ temp[i - 1] ^ gf_mul[temp[i]][0];
		}
	}

}

/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	// Implement this function

		unsigned char tempmsg[16];

		unsigned char tempkey[16];

		unsigned char temp[4];

		int i;

		int j;

		for(i = 0; i < 16; i++){

			tempmsg[i] = charsToHex(msg_ascii[2 * i], msg_ascii[2 * i + 1]);

			tempkey[i] = charsToHex(key_ascii[2 * i], key_ascii[2 * i + 1]);

		}

		unsigned char keySchedule[176];

		keyExpansion(tempkey, keySchedule);

		addRoundKey(tempmsg, keySchedule, 0);

		for(i = 0; i < 9; i++){

			for(j = 0; j < 16; j++)
				tempmsg[j] = subBtyes(tempmsg[j]);

			shiftRows(tempmsg);
			mixColumn(tempmsg);
			addRoundKey(tempmsg, keySchedule, (i + 1));
		}

		for(j = 0; j < 16; j++)
				tempmsg[j] = subBtyes(tempmsg[j]);

		shiftRows(tempmsg);
		addRoundKey(tempmsg, keySchedule, 10);

		int ans, keyans;

		for(i = 0; i < 4; i++){

			msg_enc[i] = (tempmsg[i * 4] << 24) + (tempmsg[i * 4 + 1] << 16) + (tempmsg[i * 4 + 2] << 8) + (tempmsg[i * 4 + 3]);

			key[i] = (tempkey[i * 4] << 24) + (tempkey[i * 4 + 1] << 16) + (tempkey[i * 4 + 2] << 8) + (tempkey[i * 4 + 3]);

		}
}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}
